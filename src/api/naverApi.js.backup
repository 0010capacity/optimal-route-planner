const NAVER_CLIENT_ID = process.env.REACT_APP_NAVER_CLIENT_ID || 'your_naver_client_id_here';
const NAVER_CLIENT_SECRET = process.env.REACT_APP_NAVER_CLIENT_SECRET || 'your_naver_client_secret_here';

// Naver Developers 오픈 API용 (Search API)
const NAVER_SEARCH_CLIENT_ID = process.env.REACT_APP_NAVER_SEARCH_CLIENT_ID || 'your_naver_search_client_id_here';
const NAVER_SEARCH_CLIENT_SECRET = process.env.REACT_APP_NAVER_SEARCH_CLIENT_SECRET || 'your_naver_search_client_secret_here';

// Kakao API를 Firebase Functions를 통해 호출 (다시 복귀)
export const searchPlaces = async (query, centerLocation = null) => {
  if (!query) {
    return [];
  }

  try {
    const firebaseFunctionUrl = `https://us-central1-my-optimal-route-planner.cloudfunctions.net/searchPlacesKakao?query=${encodeURIComponent(query)}`;

    console.log('� Calling Firebase Function for Kakao search:', firebaseFunctionUrl);

    const response = await fetch(firebaseFunctionUrl);
    console.log('📊 Firebase Function response status:', response.status);

    if (response.ok) {
      const data = await response.json();
      console.log('📋 Firebase Function Kakao search response:', data);
      return data;
    } else {
      console.error('❌ Firebase Function Kakao search failed:', response.statusText);
      return [];
    }
  } catch (error) {
    console.error('💥 Error with Firebase Function Kakao search:', error);
    return [];
  }
};

// 두 지점 간 거리 계산 함수
const getDistance = (point1, point2) => {
  const R = 6371; // 지구 반지름 (km)
  const dLat = (point2.lat - point1.lat) * Math.PI / 180;
  const dLng = (point2.lng - point1.lng) * Math.PI / 180;
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(point1.lat * Math.PI / 180) * Math.cos(point2.lat * Math.PI / 180) *
    Math.sin(dLng/2) * Math.sin(dLng/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
};export const geocodeAddress = async (address) => {
  if (!address) {
    console.log('No address provided to geocode');
    return null;
  }

  console.log('Geocoding address:', address);

  // Firebase Functions를 통한 Naver Geocoding API 호출
  try {
    const firebaseFunctionUrl = `https://us-central1-my-optimal-route-planner.cloudfunctions.net/geocodeAddress?address=${encodeURIComponent(address)}`;

    console.log('Calling Firebase Function for geocoding:', firebaseFunctionUrl);

    const response = await fetch(firebaseFunctionUrl);
    console.log('Firebase Function response status:', response.status);

    if (response.ok) {
      const data = await response.json();
      console.log('Firebase Function geocoding response:', data);

      if (data.lat && data.lng) {
        console.log('Geocoded location via Firebase:', data);
        return { lat: data.lat, lng: data.lng };
      }
    }
  } catch (error) {
    console.error('Error with Firebase Function geocoding:', error);
  }

  // Fallback to Google Places API
  console.log('Falling back to Google Places API for geocoding');
  try {
    const apiKey = 'AIzaSyCuI4OfM-oPbnKoes_uaYfUWZ2f-btjgtQ';
    const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`;

    const response = await fetch(url);
    const data = await response.json();

    if (data.status === 'OK' && data.results && data.results.length > 0) {
      const location = data.results[0].geometry.location;
      console.log('Geocoded location via Google:', location);
      return { lat: location.lat, lng: location.lng };
    }
  } catch (error) {
    console.error('Error with Google Places API geocoding:', error);
  }

  // Return mock data as last resort
  console.log('Using mock data for geocoding');
  return { lat: 37.5665, lng: 126.9780 }; // Seoul coordinates
};

export const getDirections = async (coordsArray) => {
  if (!coordsArray || coordsArray.length < 2) {
    console.error('Directions API requires at least two coordinates (start and end).');
    return null;
  }

  console.log('Getting directions for coords:', coordsArray);

  // Firebase Functions를 통한 Naver Directions API 호출
  try {
    const firebaseFunctionUrl = `https://us-central1-my-optimal-route-planner.cloudfunctions.net/getDirections`;

    console.log('Calling Firebase Function for directions:', firebaseFunctionUrl);

    const response = await fetch(firebaseFunctionUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ coordsArray }),
    });

    console.log('Firebase Function response status:', response.status);

    if (response.ok) {
      const data = await response.json();
      console.log('Firebase Function directions response:', data);

      if (data.path && data.totalTime && data.totalDistance) {
        console.log('Real directions received via Firebase:', data);
        return data;
      }
    }
  } catch (error) {
    console.error('Error with Firebase Function directions:', error);
  }

  // Fallback to mock data
  console.log('Using mock directions data');
  const mockPath = coordsArray.map((coord, index) => ({
    lat: coord.lat + (Math.random() - 0.5) * 0.01,
    lng: coord.lng + (Math.random() - 0.5) * 0.01,
  }));

  return {
    path: mockPath,
    totalTime: 1800, // 30 minutes
    totalDistance: 15000, // 15km
    order: coordsArray.map((coord, index) => `Point ${index + 1}`)
  };
};
