import React from 'react';
import Icon from './Icon';

const LocationList = ({
  locations,
  optimizedRoute,
  onLocationClick,
            <div className="route-order">
              <Icon name="route" size={16} />
              <span className="route-path">
                {routeNames.join(' → ')}
              </span>
            </div>dLocation,
  onOptimizeRoute,
  onDragStart,
  onDragOver,
  onDragLeave,
  onDrop,
  onDragEnd,
  draggedIndex,
  dragOverIndex,
  onDeleteLocation
}) => {
  // 경로 순서에 따른 장소 이름 매핑
  const getRouteDisplayNames = () => {
    if (!optimizedRoute || !optimizedRoute.order) return [];
    
    return optimizedRoute.order.map(index => {
      const location = locations[index];
      return location?.name || `장소 ${index + 1}`;
    });
  };

  // 예상 도착 시간 계산
  const getEstimatedArrivalTimes = () => {
    if (!optimizedRoute || !optimizedRoute.path) return [];
    
    const times = [];
    let currentTime = Date.now(); // 현재 시간부터 시작
    
    // 각 구간의 시간을 누적
    for (let i = 0; i < optimizedRoute.path.length - 1; i++) {
      // 간단한 추정: 평균 속도 30km/h로 계산
      const segmentDistance = 0.1; // km (실제로는 경로 데이터에서 계산)
      const segmentTime = (segmentDistance / 30) * 60 * 60 * 1000; // ms
      currentTime += segmentTime;
      
      if (i < locations.length - 1) {
        times.push(new Date(currentTime));
      }
    }
    
    return times;
  };

  const routeNames = getRouteDisplayNames();
  const arrivalTimes = getEstimatedArrivalTimes();

  return (
    <>
      <div className="location-list-section">
        <ul className="location-list">
          {locations.map((location, index) => (
            <li
              key={index}
              className={`location-item ${index === 0 ? 'start' : index === locations.length - 1 ? 'end' : 'waypoint'} ${draggedIndex === index ? 'dragging' : ''} ${dragOverIndex === index ? 'drag-over' : ''}`}
              onDragOver={(e) => onDragOver(e, index)}
              onDragLeave={onDragLeave}
              onDrop={(e) => onDrop(e, index)}
              style={{
                transform: draggedIndex === index ? 'rotate(5deg) scale(1.05)' : 
                          dragOverIndex === index ? 'scale(1.02)' : 'none',
                zIndex: draggedIndex === index ? 1000 : 
                        dragOverIndex === index ? 500 : 'auto'
              }}
            >
              <div className="location-visual">
                <div
                  className="location-dot"
                  draggable
                  onDragStart={(e) => onDragStart(e, index)}
                  onDragEnd={onDragEnd}
                ></div>
                <div className="location-line"></div>
              </div>
              <div className="location-content">
                <button
                  className="location-button"
                  onClick={() => onLocationClick(index)}
                >
                  {location.name || '장소를 선택하세요'}
                </button>
                {optimizedRoute && arrivalTimes[index] && (
                  <div className="arrival-time">
                    <Icon name="clock" size={14} />
                    <span className="arrival-time-text">
                      {arrivalTimes[index].toLocaleTimeString('ko-KR', {
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </span>
                  </div>
                )}
              </div>
              {locations.length > 2 && index !== 0 && index !== locations.length - 1 && (
                <button
                  className="delete-button"
                  onClick={() => onDeleteLocation(index)}
                >
                  ×
                </button>
              )}
            </li>
          ))}
        </ul>
        <button
          className="add-location-button"
          onClick={onAddLocation}
          aria-label="새 장소 추가"
          title="새 장소 추가"
        >
          +
        </button>
        <button
          className="optimize-button"
          onClick={onOptimizeRoute}
          disabled={false}
          aria-label="경로 최적화"
        >
          <Icon name="optimize" size={16} />
          경로 최적화
        </button>
        {optimizedRoute && (
          <div className="route-summary" role="region" aria-label="최적화된 경로 정보">
            <div className="route-order">
              <span className="route-icon">�️</span>
              <span className="route-path">
                {routeNames.join(' → ')}
              </span>
            </div>
            <div className="route-stats">
              <span className="time-icon">⏱️</span>
              <span className="time-text">
                {(() => {
                  const totalMinutes = Math.round(optimizedRoute.totalTime / 60000);
                  const hours = Math.floor(totalMinutes / 60);
                  const minutes = totalMinutes % 60;
                  return hours > 0 ? `${hours}시간 ${minutes}분` : `${minutes}분`;
                })()}
              </span>
              <span className="distance-icon">📏</span>
              <span className="distance-text">
                {(optimizedRoute.totalDistance / 1000).toFixed(1)}km
              </span>
            </div>
            <div className="departure-time">
              <span className="departure-icon">🚀</span>
              <span className="departure-text">
                출발: {new Date().toLocaleTimeString('ko-KR', {
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </span>
            </div>
          </div>
        )}
      </div>
    </>
  );
};

export default LocationList;
